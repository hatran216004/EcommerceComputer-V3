@using Store_EF.Models;
@using Store_EF.Models.Extensions;
@model CheckOutForm
@{
    ViewBag.Title = "CheckOut";
    StoreEntities store = new StoreEntities();
    int userId = int.Parse(Session["UserId"].ToString());
    User_ user = store.Users.First(x => x.UserId == userId);
    Html.EnableClientValidation(true);
}
<div class="product-container">
    <!-- Breakcrumbs -->
    <ul class="breakcrumbs">
        <li>
            <a href="@Url.Action("Index", "Home")"
               class="breakcrumbs__link">
                Trang chủ
                <img src="~/Public/icons/arrow-right.svg" alt="" height="10" />
            </a>
        </li>
        <li>
            <a href="#!"
               class="breakcrumbs__link breakcrumbs__link--current">
                Thanh toán
            </a>
        </li>
    </ul>
</div>
<div class="checkout">
    <p class="checkout__title">Chi tiết đơn hàng</p>
    @using (Html.BeginForm("Payment", "CheckOut", FormMethod.Post, new { @class = "checkout__form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="checkout__form-input">
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.FullName)
                @Html.TextBoxFor(x => x.FullName)
                @Html.ValidationMessageFor(x => x.FullName, "", new {})
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.Phone)
                @Html.TextBoxFor(x => x.Phone)
                @Html.ValidationMessageFor(x => x.Phone, "", new { })
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.Province)
                <select id="@nameof(Model.Province)" name="@nameof(Model.Province)"></select>
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.District)
                <select id="@nameof(Model.District)" name="@nameof(Model.District)"></select>
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.Ward)
                <select id="@nameof(Model.Ward)" name="@nameof(Model.Ward)"></select>
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.Home)
                @Html.TextBoxFor(x => x.Home)
            </div>
            <div class="checkout__form-group">
                @Html.LabelFor(x => x.Note)
                @Html.TextBoxFor(x => x.Note)
            </div>
        </div>

        <div class="checkout__info">
            @{
                foreach (Cart c in user.Carts)
                {
                    <div class="checkout__info-products">
                        <div class="checkout__info-product">
                            <div class="checkout__info-product-item">
                                <img src="~/Public/imgs/Products/@c.Product.Thumbnail(store)" alt="" />
                                <span>@c.Product.Title</span>
                            </div>
                            <div class="checkout__info-product-price">
                                @c.Product.FormattedPrice() x @c.Quantity
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="checkout__info-warp">
                <div class="checkout__info-item">
                    @{
                        int totalPrice = user.TotalCartPrice();
                        int shippingPrice = 0;
                    }
                    <span>Tạm tính: </span>
                    <span class="checkout__info-item-price">@Helpers.FormattedPrice(totalPrice)</span>
                </div>
                <div class="checkout__info-item">
                    <span>Vận chuyển: </span>
                    <span class="checkout__info-item-price">@Helpers.FormattedPrice(shippingPrice)</span>
                </div>
                <div class="checkout__info-item">
                    <span>Tổng cộng: </span>
                    <span class="checkout__info-item-price">@Helpers.FormattedPrice(totalPrice + shippingPrice)</span>
                </div>
            </div>
            <div class="checkout__method">
                @Html.ValidationMessageFor(x => x.PaymentMethod, "", new { })
                <div class="checkout__method-item">
                    <div class="checkout__method-radio">
                        @Html.RadioButtonFor(x => x.PaymentMethod, "Bank")
                        <label for="@nameof(Model.PaymentMethod)">Ngân hàng</label>
                    </div>
                </div>
                <div class="checkout__method-item">
                    <div class="checkout__method-radio">
                        @Html.RadioButtonFor(x => x.PaymentMethod, "Cash")
                        <label for="@nameof(Model.PaymentMethod)">Tiền mặt</label>
                    </div>
                </div>
            </div>
            <div class="checkout__action">
                <div class="">
                    @Html.ValidationMessage("error")
                </div>
                <button type="submit" class="btn btn--primary">
                    Tiến hành thanh toán
                </button>
            </div>
        </div>
    }
</div>
<script>
    const provinceEle = document.getElementById('@nameof(Model.Province)');
    const districtEle = document.getElementById('@nameof(Model.District)');
    const wardEle = document.getElementById('@nameof(Model.Ward)');

    fetch('@Url.Action("Provinces", "Helpers")', {
        method: "GET"
    }).then(reponse => reponse.json().then(data => {
        const json = JSON.parse(data)
        json.forEach(item => {
            const node = document.createElement("option");
            node.setAttribute("value", item.code);
            node.innerText = item.name;
            provinceEle.appendChild(node);
        })
        provinceEle.selectedIndex = '-1';
        districtEle.selectedIndex = '-1';
        wardEle.selectedIndex = '-1';
    }))

    provinceEle.addEventListener('change', function () {
        var form = new FormData();
        form.append("provinceCode", this.value);
        fetch('@Url.Action("Districts", "Helpers")', {
            method: "POST",
            body: form,
        }).then(reponse => reponse.json().then(data => {
            const json = JSON.parse(data)
            districtEle.innerHTML = '';
            wardEle.innerHTML = '';
            json.forEach(item => {
                const node = document.createElement("option");
                node.setAttribute("value", item.code);
                node.innerText = item.name;
                districtEle.appendChild(node);
            })
            districtEle.selectedIndex = '-1';
            wardEle.selectedIndex = '-1';
        }))
    })

    districtEle.addEventListener('change', function () {
        var form = new FormData();
        form.append("provinceCode", provinceEle.value);
        form.append("districtCode", this.value);
        fetch('@Url.Action("Wards", "Helpers")', {
            method: "POST",
            body: form,
        }).then(reponse => reponse.json().then(data => {
            const json = JSON.parse(data)
            wardEle.innerHTML = '';
            json.forEach(item => {
                const node = document.createElement("option");
                node.setAttribute("value", item.code);
                node.innerText = item.name;
                wardEle.appendChild(node);
            })
            wardEle.selectedIndex = '-1';
        }))
    })
</script>