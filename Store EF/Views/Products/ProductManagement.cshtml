@using Store_EF.Models
@model PagedList.IPagedList<Product>
@using PagedList.Mvc;
@using PagedList;
@using Store_EF.Models.Extensions;
@{
    ViewBag.Title = "ProductManagement";
    Layout = "~/Views/Shared/_LayoutPageProfile.cshtml";
    if (ViewBag.MaxPage == null)
    {
        ViewBag.MaxPage = 1;
    }

    StoreEntities store = new StoreEntities();
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">


<div class="pm__main">
    <div class="pm__title">Quản lý sản phẩm</div>
    <div class="pm__btn-add-warp">
        <div class="pm__btn-add">
            <img class="" src="~/Public/icons/plus.svg" alt="" />
            <a href="@Url.Action("Add", "Products")">Thêm sản phẩm mới</a>
        </div>
    </div>
    <table class="pm__table">
        <thead>
            <tr>
                <th class="pm__table-title" scope="col">Mã sản phẩm</th>
                <th class="pm__table-title" scope="col">Hình ảnh</th>
                <th class="pm__table-title" scope="col">
                    Tên sản phẩm
                </th>
                <th class="pm__table-title" scope="col">Số lượng</th>
                <th class="pm__table-title" scope="col">Chức năng</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                foreach (Product p in Model)
                {
                    <tr>
                        <td class="pm__table-item" scope="row">@p.ProductId</td>
                        <td class="pm__table-item">
                            <img class="pm__table-item-img"
                                 src="~/Public/Imgs/Products/@p.Thumbnail(store)"
                                 alt="" />
                        </td>
                        <td class="pm__table-item"><div class="multiline-ellipsis">@p.Title</div></td>
                        <td class="pm__table-item">@p.Stock</td>
                        <td class="pm__table-item">
                            @*<a href="@Url.Action("Delete", "Products", new { id = p.ProductId})" class="DeleteElement btn-delete-link">Xóa</a>*@
                            <a href="#" data-id="@p.ProductId" class="DeleteElement btn-delete-link">Xóa</a>
                            <a href="@Url.Action("Update", "Products", new { id = p.ProductId})" class="btn-delete-link">Sửa</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="pagination" , style="width: 100%">
    @{
        string action = HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString();
        string product = Request.QueryString.Get("product");
    }
    @Html.PagedListPager(
        Model,
        page => Url.Action(action, new { product, page }),
        new PagedListRenderOptions
        {
            LiElementClasses = new[] { "" },
            MaximumPageNumbersToDisplay = ViewBag.MaxPage,
        }
    )
</div>



<!-- Modal comfrim -->
<div id="deleteProcductModal" class="modal">
    <div class="modal-content">
        <span class="model__btn-close">&times;</span>
        <h2>Xác nhận xóa</h2>
        <p>Bạn có chắc chắn muốn xóa sản phẩm này không?</p>
        <div class="modal-actions">
            <button id="cancelBtn" class="model__btn-cancel">Hủy</button>
            <a id="confirmDeleteBtn" href="#" class="model__btn-delete">Xóa</a>
        </div>
    </div>
</div>


<script>
    var modal = document.getElementById("deleteProcductModal");
    var confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    var cancelBtn = document.getElementById("cancelBtn");
    var closeBtn = document.getElementsByClassName("model__btn-close")[0];

    var deleteBtns = document.querySelectorAll('.DeleteElement')

    deleteBtns.forEach(deleteBtn => {
        deleteBtn.addEventListener("click", (e) => {
            e.preventDefault();
            console.log([deleteBtn])
            const proid = deleteBtn.getAttribute('data-id')
            confirmDeleteBtn.setAttribute('href', `@Url.Action("Delete", "Products", new { id = "Proid" })`.replace('Proid', proid))
            modal.classList.add('display')
        })
    })

    // Sự kiện đóng modal khi nhấn x hoặc hủy, hoặc nhấn ra ngoài
    cancelBtn.onclick = function () {
        modal.classList.remove('display')
    }
    closeBtn.onclick = function () {
        modal.classList.remove('display')

    }
    window.onclick = function (event) {
        if (event.target === modal) {
            modal.classList.remove('display')

        }
    }
</script>



<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>


@{
    var successMessage = TempData["SuccessMessage"];
    var errorMessage = TempData["ErrorMessage"];
}

@if (successMessage != null)
{
    <script>
        Toastify({
            text: `@successMessage`,
            duration: 3000,
            gravity: "top",
            position: "right",
            backgroundColor: "#4CAF50", // Màu nền thông báo thành công
            className: "info",
        }).showToast();
    </script>
}

@if (errorMessage != null)
{
    <script>
        Toastify({
            text: `@errorMessage`,
            duration: 3000,
            gravity: "top",
            position: "right",
            backgroundColor: "#FF0000", // Màu nền thông báo lỗi
            className: "error",
        }).showToast();
    </script>
}

