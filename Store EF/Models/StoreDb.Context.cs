//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Store_EF.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Data;

    public partial class StoreEntities : DbContext
    {
        public StoreEntities()
            : base("name=StoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Gallery> Galleries { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        public virtual int UpdatePaymentStatus(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePaymentStatus", userIdParameter);
        }

        public virtual int GetProductDiscountPercent(int productId)
        {
            var productIdParameter = new SqlParameter("@ProductId", SqlDbType.Int);
            productIdParameter.Value = productId;
            string query = "SELECT dbo.GetProductDiscountPercent(@ProductId) AS DiscountPercent";
            var result = ((IObjectContextAdapter)this).ObjectContext
                         .ExecuteStoreQuery<int>(query, productIdParameter)
                         .FirstOrDefault();
            return result;
        }
        public virtual int UpdatePromoPrice(int? brandId, int? categoryId, int? discountPercent, int? discountMoney)
        {
            var brandIdParameter = brandId.HasValue ? new SqlParameter("@BrandId", brandId) : new SqlParameter("@BrandId", DBNull.Value);
            var categoryIdParameter = categoryId.HasValue ? new SqlParameter("@CategoryId", categoryId) : new SqlParameter("@CategoryId", DBNull.Value);
            var discountPercentParameter = discountPercent.HasValue ? new SqlParameter("@DiscountPercent", discountPercent) : new SqlParameter("@DiscountPercent", DBNull.Value);
            var discountMoneyParameter = discountMoney.HasValue ? new SqlParameter("@DiscountMoney", discountMoney) : new SqlParameter("@DiscountMoney", DBNull.Value);

            return this.Database.ExecuteSqlCommand(
                "EXEC UpdatePromoPrice @BrandId, @CategoryId, @DiscountPercent, @DiscountMoney",
                brandIdParameter, categoryIdParameter, discountPercentParameter, discountMoneyParameter);
        }

    }
}
